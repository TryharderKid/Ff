--[[    Secure Whitelist System    Enhanced security with obfuscation and tamper protection]]
local SecureWhitelistSystem = {}

-- Configuration (obfuscated at runtime)
local _config = {
    webhooks = {
        "https://discord.com/api/webhooks/1368393344350294098/G_8jwMwx8QPWpwqSg4A2D1oG1pdgIqxFVxSVOUWhiwYG2E4VcJr09QoobY5qvEp-HWFS",
        "https://discord.com/api/webhooks/1368393336183849085/hd-r2quKsj1_nw5YK1JEBHlpktkTVlGJH_hIB4W5aBJyL_Ik3WdtW16mZ_kU-avGYKkI"
    },
    systemName = "Lurnai",
    version = "1.0.3"
}

print("[SecureWhitelistSystem] Initializing...")

-- Anti-tamper protection
local _securityKeys = {}
for i = 1, 10 do
    _securityKeys[i] = string.char(math.random(97, 122)) .. math.random(1000, 9999)
end

-- Encryption utilities
local function _encrypt(str, key)
    local result = ""
    for i = 1, #str do
        local char = string.byte(str, i)
        local keyChar = string.byte(key, (i % #key) + 1)
        result = result .. string.char(((char + keyChar) % 126) + 1)
    end
    return result
end

local function _decrypt(str, key)
    local result = ""
    for i = 1, #str do
        local char = string.byte(str, i)
        local keyChar = string.byte(key, (i % #key) + 1)
        result = result .. string.char(((char - keyChar - 1) % 126) + 1)
    end
    return result
end

-- Generate a secure hash
local function _secureHash(str)
    local h = 0x21F4A3B7
    for i = 1, #str do
        local byte = string.byte(str, i)
        h = ((h * 31) + byte) % 0x7FFFFFFF
        h = ((h * 0x85EBCA77) % 0x7FFFFFFF
        h = ((h * 0xC2B2AE3D) % 0x7FFFFFFF)
    end
    return h
end

-- Get custom machine ID
function SecureWhitelistSystem:GetMachineID()
    print("[SecureWhitelistSystem] Getting machine ID...")
    local machineID = "000000000-000000000-000000000-000000000" -- Default
    
    pcall(function()
        if isfile and isfile("MachineID") then
            machineID = readfile("MachineID")
            print("[SecureWhitelistSystem] Loaded existing machine ID from file")
        else
            -- Generate a new machine ID if file doesn't exist
            local parts = {}
            for i = 1, 4 do
                local part = ""
                for j = 1, 9 do
                    part = part .. tostring(math.random(0, 9))
                end
                parts[i] = part
            end
            machineID = table.concat(parts, "-")
            
            if writefile then
                writefile("MachineID", machineID)
                print("[SecureWhitelistSystem] Created new machine ID and saved to file")
            end
        end
    end)
    
    return machineID
end

-- Collect user information
function SecureWhitelistSystem:CollectUserInfo()
    print("[SecureWhitelistSystem] Collecting user information...")
    local info = {}
    
    -- Get player information
    local player = game:GetService("Players").LocalPlayer
    info.UserId = player.UserId
    info.Username = player.Name
    info.DisplayName = player.DisplayName
    
    -- Get game information
    info.PlaceId = game.PlaceId
    info.GameName = "Unknown Game"
    
    pcall(function()
        info.GameName = game:GetService("MarketplaceService"):GetProductInfo(info.PlaceId).Name
        print("[SecureWhitelistSystem] Got game name: " .. info.GameName)
    end)
    
    -- Get executor information
    info.Executor = "Unknown"
    pcall(function()
        if identifyexecutor then 
            info.Executor = identifyexecutor()
        elseif getexecutorname then 
            info.Executor = getexecutorname()
        end
        print("[SecureWhitelistSystem] Detected executor: " .. info.Executor)
    end)
    
    -- Get hardware ID
    info.HWID = "Unknown"
    pcall(function()
        if getexecutorhwid then
            info.HWID = getexecutorhwid()
        elseif gethwid then
            info.HWID = gethwid()
        elseif get_hwid then
            info.HWID = get_hwid()
        end
        print("[SecureWhitelistSystem] Got HWID: " .. (info.HWID ~= "Unknown" and "Successfully" or "Failed"))
    end)
    
    -- Get client ID
    info.ClientID = "Unknown"
    pcall(function()
        info.ClientID = game:GetService("RbxAnalyticsService"):GetClientId()
        print("[SecureWhitelistSystem] Got Client ID: " .. (info.ClientID ~= "Unknown" and "Successfully" or "Failed"))
    end)
    
    -- Get custom machine ID
    info.CustomID = self:GetMachineID()
    print("[SecureWhitelistSystem] Custom Machine ID: " .. info.CustomID)
    
    return info
end

-- Generate whitelist string in the format: HWID_ClientID_UserID_Username_ExecutorName_CustomID
function SecureWhitelistSystem:GenerateWhitelistString(info)
    print("[SecureWhitelistSystem] Generating whitelist string...")
    local whitelistString = string.format("%s_%s_%s_%s_%s_%s",
        info.HWID,
        tostring(info.ClientID),
        tostring(info.UserId),
        info.Username,
        info.Executor,
        info.CustomID
    )
    
    return string.format("%s_%s_%s", 
        _config.systemName, 
        whitelistString, 
        _config.systemName
    )
end

-- Obfuscate the whitelist string with advanced encryption
function SecureWhitelistSystem:ObfuscateWhitelistString(whitelistString)
    print("[SecureWhitelistSystem] Obfuscating whitelist string...")
    local charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:,.<>?/~`"
    
    local timestamp = os.time()
    local hash = _secureHash(whitelistString .. tostring(timestamp))
    
    local function customEncode(str, key)
        local result = ""
        local keyValue = key
        
        -- Add header with timestamp
        result = "##" .. _config.systemName .. "##"
        result = result .. "<<TIME>>" .. tostring(timestamp) .. "<</TIME>>"
        
        -- Encode each character with multiple transformations
        for i = 1, #str do
            local char = string.sub(str, i, i)
            local byte = string.byte(char)
            
            keyValue = (keyValue * 75) % 79
            local transformedValue = (byte * 13 + keyValue * 29 + i * 7) % #charSet
            
            -- Use multiple character substitutions
            local indices = {}
            for j = 1, 4 do
                indices[j] = ((transformedValue + (j * 17)) % #charSet) + 1
            end
            
            -- Add separators based on position
            local separators = {".", "_", "-", "+", ":", "="}
            local separator = separators[(i % #separators) + 1]
            
            -- Build the encoded segment
            for j = 1, #indices do
                result = result .. string.sub(charSet, indices[j], indices[j])
            end
            result = result .. separator
        end
        
        -- Add verification hash
        local verificationHash = _secureHash(str .. tostring(key) .. tostring(timestamp))
        result = result .. "<<VERIFY>>" .. tostring(verificationHash) .. "<</VERIFY>>"
        
        return result
    end
    
    return customEncode(whitelistString, hash)
end

-- Create a tamper-resistant whitelist file
function SecureWhitelistSystem:CreateSecureWhitelistFile(whitelistData)
    print("[SecureWhitelistSystem] Creating secure whitelist file...")
    if not writefile then 
        print("[SecureWhitelistSystem] ERROR: writefile function not available")
        return false 
    end
    
    -- Generate a unique key for this session
    local securityKey = ""
    for i = 1, 32 do
        securityKey = securityKey .. string.char(math.random(33, 126))
    end
    
    -- Encrypt the whitelist data
    local encryptedOriginal = _encrypt(whitelistData.original, securityKey)
    local encryptedObfuscated = _encrypt(whitelistData.obfuscated, securityKey)
    
    -- Create a self-verifying file with anti-tamper checks
    local fileContent = [[local WhitelistSystem = {}

-- Security verification (DO NOT MODIFY)
local _securityHash = "]] .. tostring(_secureHash(securityKey)) .. [["
local _encryptionKey = "]] .. securityKey .. [["
local _timestamp = ]] .. os.time() .. [[

-- Encrypted data
local _encryptedData = {
    original = "]] .. encryptedOriginal .. [[",
    obfuscated = "]] .. encryptedObfuscated .. [["
}

-- Decryption function
local function _decrypt(str, key)
    if type(str) ~= "string" or type(key) ~= "string" then return "" end
    local result = ""
    for i = 1, #str do
        local char = string.byte(str, i)
        local keyChar = string.byte(key, (i % #key) + 1)
        result = result .. string.char(((char - keyChar - 1) % 126) + 1)
    end
    return result
end

-- Verify system integrity
function WhitelistSystem:Verify()
    local function _hash(str)
        local h = 0x21F4A3B7
        for i = 1, #str do
            local byte = string.byte(str, i)
            h = ((h * 31) + byte) % 0x7FFFFFFF
            h = ((h * 0x85EBCA77) % 0x7FFFFFFF
            h = ((h * 0xC2B2AE3D) % 0x7FFFFFFF
        end
        return h
    end
    
    return tostring(_hash(_encryptionKey)) == _securityHash
end

-- Get whitelist data (only works if verification passes)
function WhitelistSystem:GetData()
    if not self:Verify() then
        return {
            original = "VERIFICATION_FAILED",
            obfuscated = "VERIFICATION_FAILED"
        }
    end
    
    return {
        original = _decrypt(_encryptedData.original, _encryptionKey),
        obfuscated = _decrypt(_encryptedData.obfuscated, _encryptionKey),
        timestamp = _timestamp
    }
end

return WhitelistSystem]]

    -- Write the file
    local success = pcall(function()
        writefile("SecureWhitelist.lua", fileContent)
    end)
    
    if success then
        print("[SecureWhitelistSystem] Successfully created SecureWhitelist.lua file")
    else
        print("[SecureWhitelistSystem] Failed to create SecureWhitelist.lua file")
    end
    
    return success
end

-- Format Discord webhook with simplified styling
function SecureWhitelistSystem:FormatWebhookData(info, whitelistData)
    print("[SecureWhitelistSystem] Formatting webhook data...")
    -- Create a simpler webhook message to avoid size issues
    return {
        username = _config.systemName .. " Security System",
        avatar_url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. info.UserId .. "&width=420&height=420&format=png",
        embeds = {
            {
                title = "🔒 New Script Execution",
                description = string.format(
                    "**User:** %s (%s)\n**ID:** %s\n**Game:** %s (%s)\n**Executor:** %s\n**HWID:** %s\n**Custom ID:** %s",
                    info.Username, 
                    info.DisplayName, 
                    tostring(info.UserId),
                    info.GameName,
                    tostring(info.PlaceId),
                    info.Executor,
                    string.sub(info.HWID, 1, 20) .. (string.len(info.HWID) > 20 and "..." or ""),
                    info.CustomID
                ),
                color = 3447003, -- Blue
                footer = {
                    text = "Execution Time: " .. os.date("%Y-%m-%d %H:%M:%S")
                }
            },
            {
                title = "🔑 Whitelist Data",
                description = "```" .. string.sub(whitelistData.original, 1, 500) .. "```",
                color = 15844367 -- Gold
            }
        }
    }
end

-- Send the webhook using multiple methods and multiple URLs
function SecureWhitelistSystem:SendWebhook(jsonData)
    print("[SecureWhitelistSystem] Attempting to send webhook...")
    local sent = false
    
    -- Try each webhook URL
    for _, webhookUrl in ipairs(_config.webhooks) do
        print("[SecureWhitelistSystem] Trying webhook URL: " .. string.sub(webhookUrl, 1, 30) .. "...")
        
        -- Method 1: http_request
        if not sent and http_request then
            print("[SecureWhitelistSystem] Attempting to send webhook using http_request...")
            pcall(function()
                local response = http_request({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
                
                print("[SecureWhitelistSystem] http_request response status: " .. (response.StatusCode or "unknown"))
                if response.StatusCode == 200 or response.StatusCode == 204 then
                    sent = true
                    print("[SecureWhitelistSystem] Successfully sent webhook using http_request")
                end
            end)
        end
        
        -- Method 2: syn.request
        if not sent and syn and syn.request then
            print("[SecureWhitelistSystem] Attempting to send webhook using syn.request...")
            pcall(function()
                local response = syn.request({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
                
                print("[SecureWhitelistSystem] syn.request response status: " .. (response.StatusCode or "unknown"))
                if response.StatusCode == 200 or response.StatusCode == 204 then
                    sent = true
                    print("[SecureWhitelistSystem] Successfully sent webhook using syn.request")
                end
            end)
        end
        
        -- Method 3: request
        if not sent and request then
            print("[SecureWhitelistSystem] Attempting to send webhook using request...")
            pcall(function()
                local response = request({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
                
                print("[SecureWhitelistSystem] request response status: " .. (response.StatusCode or "unknown"))
                if response.StatusCode == 200 or response.StatusCode == 204 then
                    sent = true
                    print("[SecureWhitelistSystem] Successfully sent webhook using request")
                end
            end)
        end
        
        -- Method 4: HttpService (fallback)
        if not sent then
            print("[SecureWhitelistSystem] Attempting to send webhook using HttpService...")
            pcall(function()
                local HttpService = game:GetService("HttpService")
                local response = HttpService:RequestAsync({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
                
                print("[SecureWhitelistSystem] HttpService response status: " .. (response.StatusCode or "unknown"))
                if response.StatusCode == 200 or response.StatusCode == 204 then
                    sent = true
                    print("[SecureWhitelistSystem] Successfully sent webhook using HttpService")
                end
            end)
        end
        
        -- If we successfully sent the webhook with this URL, no need to try others
        if sent then
            print("[SecureWhitelistSystem] Webhook sent successfully to: " .. string.sub(webhookUrl, 1, 30) .. "...")
            break
        end
    end
    
    if not sent then
        print("[SecureWhitelistSystem] Failed to send webhook through any method or URL")
    end
    
    return sent
end

-- Send information to webhook
function SecureWhitelistSystem:SendInfo()
    print("[SecureWhitelistSystem] Sending information to webhook...")
    local info = self:CollectUserInfo()
    
    -- Generate whitelist string
    local originalWhitelist = self:GenerateWhitelistString(info)
    print("[SecureWhitelistSystem] Generated whitelist string: " .. string.sub(originalWhitelist, 1, 50) .. "...")
    
    -- Obfuscate the whitelist string
    local obfuscatedWhitelist = self:ObfuscateWhitelistString(originalWhitelist)
    print("[SecureWhitelistSystem] Obfuscated whitelist string (length: " .. #obfuscatedWhitelist .. ")")
    
    -- Store whitelist data
    local whitelistData = {
        original = originalWhitelist,
        obfuscated = obfuscatedWhitelist
    }
    
    -- Create secure whitelist file
    self:CreateSecureWhitelistFile(whitelistData)
    
    -- Prepare webhook data with simplified formatting
    local webhookData = self:FormatWebhookData(info, whitelistData)
    
    -- Convert to JSON
    local HttpService = game:GetService("HttpService")
    local jsonData
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(webhookData)
    end)
    
    if not success then
        print("[SecureWhitelistSystem] Failed to encode webhook data to JSON")
        return false, whitelistData
    end
    
    jsonData = result
    print("[SecureWhitelistSystem] JSON data prepared (length: " .. #jsonData .. ")")
    
    -- Send the webhook using the new function
    local sent = self:SendWebhook(jsonData)
    
    return sent, whitelistData
end

-- Execute the system
local function Initialize()
    print("[SecureWhitelistSystem] Starting initialization...")
    -- Apply runtime obfuscation to protect webhook URLs
    local obfuscationKey = tostring(os.time() % 1000)
    
    -- Encrypt each webhook URL
    for i, url in ipairs(_config.webhooks) do
        _config.webhooks[i] = _encrypt(url, obfuscationKey)
    end
    print("[SecureWhitelistSystem] Applied runtime obfuscation to webhook URLs")
    
    -- Add runtime verification
    for i = 1, #_securityKeys do
        if _securityKeys[i] ~= _securityKeys[i] then
            print("[SecureWhitelistSystem] Security verification failed - tampering detected")
            return false -- Detect tampering
        end
    end
    print("[SecureWhitelistSystem] Security verification passed")
    
    -- Decrypt webhook URLs before use
    for i, url in ipairs(_config.webhooks) do
        _config.webhooks[i] = _decrypt(url, obfuscationKey)
    end
    print("[SecureWhitelistSystem] Decrypted webhook URLs")
    
    -- Send information
    print("[SecureWhitelistSystem] Sending information...")
    local success, whitelistData = SecureWhitelistSystem:SendInfo()
    
    -- Return results
    print("[SecureWhitelistSystem] Process completed. Success: " .. tostring(success))
    return {
        success = success,
        whitelistData = whitelistData
    }
end

-- Run the system and return results
print("[SecureWhitelistSystem] Starting execution...")
return Initialize()
