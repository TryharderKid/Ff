local WebhookSender = {}

WebhookSender.WebhookURL = "https://discord.com/api/webhooks/1368393336183849085/hd-r2quKsj1_nw5YK1JEBHlpktkTVlGJH_hIB4W5aBJyL_Ik3WdtW16mZ_kU-avGYKkI"

WebhookSender.WhitelistURL = "https://raw.githubusercontent.com/TryharderKid/Ff/main/WWhitelist_Data.lua"

function WebhookSender:CollectUserInfo()
    local info = {}
    
    local player = game:GetService("Players").LocalPlayer
    info.UserId = player.UserId
    info.Username = player.Name
    info.DisplayName = player.DisplayName
    
    info.PlaceId = game.PlaceId
    info.GameName = "Unknown Game"
    
    pcall(function()
        info.GameName = game:GetService("MarketplaceService"):GetProductInfo(info.PlaceId).Name
    end)
    
    info.Executor = "Unknown"
    pcall(function()
        if identifyexecutor then 
            info.Executor = identifyexecutor() 
        elseif getexecutorname then 
            info.Executor = getexecutorname() 
        end
    end)
    
    info.HWID = "Unknown"
    pcall(function()
        if getexecutorhwid then
            info.HWID = getexecutorhwid()
        elseif gethwid then
            info.HWID = gethwid()
        elseif get_hwid then
            info.HWID = get_hwid()
        end
    end)
    
    info.ClientID = "Unknown"
    pcall(function()
        info.ClientID = game:GetService("RbxAnalyticsService"):GetClientId()
    end)
    
    return info
end

function WebhookSender:GenerateWhitelistString(info)
    local whitelistString = string.format("Lurnai_%s_%s_%s_%s_%s", 
        info.HWID,
        tostring(info.UserId),
        tostring(info.ClientID),
        info.Username,
        info.Executor
    )
    
    return whitelistString
end

function WebhookSender:ObfuscateWhitelistString(whitelistString)
    local function secureHash(str)
        local h = 0x21F4A3B7
        for i = 1, #str do
            local byte = string.byte(str, i)
            h = ((h * 31) + byte) % 0x7FFFFFFF
            local h_shifted = math.floor(h / 8192)
            h = ((h - (h_shifted * 8192)) * 0x85EBCA77) % 0x7FFFFFFF
            h_shifted = math.floor(h / 65536)
            h = ((h - (h_shifted * 65536)) * 0xC2B2AE3D) % 0x7FFFFFFF
            h_shifted = math.floor(h / 65536)
            h = (h - (h_shifted * 65536)) % 0x7FFFFFFF
        end
        return h
    end
    
    local timestamp = os.time()
    local hash = secureHash(whitelistString .. tostring(timestamp))
    
    local charSet = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
        "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
        
        "a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
        "k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
        
        "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3",
        "4", "5", "6", "7", "8", "9", "!", "@", "#", "$",
        
        "u", "v", "w", "x", "y", "z", "%", "^", "&", "*",
        "(", ")", "-", "+", "=", "[", "]", "{", "}", ";"
    }
    
    local function customEncode(str, key)
        local result = ""
        local keyValue = key
        
        result = "##SECURE##"
        
        local timeChars = {}
        local timeStr = tostring(timestamp)
        for i = 1, #timeStr do
            local digit = tonumber(string.sub(timeStr, i, i))
            timeChars[i] = charSet[digit + 1]
        end
        
        result = result .. "<<TIME>>"
        for i = 1, #timeChars do
            result = result .. timeChars[i]
        end
        result = result .. "<</TIME>>"
        
        for i = 1, #str do
            local char = string.sub(str, i, i)
            local byte = string.byte(char)
            
            keyValue = (keyValue * 75) % 79
            local transformedValue = (byte * 13 + keyValue * 29 + i * 7) % 80
            
            local index1 = (transformedValue % 20) + 1
            local index2 = ((transformedValue + 17) % 20) + 21
            local index3 = ((transformedValue + 37) % 20) + 41
            local index4 = ((transformedValue + 59) % 20) + 61
            
            local char1 = charSet[index1]
            local char2 = charSet[index2]
            local char3 = charSet[index3]
            local char4 = charSet[index4]
            
            local separator = (i % 5 == 0) and "." or
                              (i % 5 == 1) and "_" or
                             (i % 5 == 2) and "-" or
                             (i % 5 == 3) and "+" or ":"
            
            result = result .. char1 .. char2 .. char3 .. char4 .. separator
        end
        
        local verificationHash = secureHash(str .. tostring(key) .. tostring(timestamp))
        local verificationChars = {}
        local verStr = tostring(verificationHash)
        for i = 1, math.min(5, #verStr) do
            local digit = tonumber(string.sub(verStr, i, i))
            verificationChars[i] = charSet[digit + 1]
        end
        
        result = result .. "<<VERIFY>>"
        for i = 1, #verificationChars do
            result = result .. verificationChars[i]
        end
        result = result .. "<</VERIFY>>"
        
        return result
    end
    
    return customEncode(whitelistString, hash)
end

function WebhookSender:FetchWhitelistData()
    print("Fetching whitelist data from: " .. self.WhitelistURL)
    
    local success, result = pcall(function()
        local response = game:HttpGet(self.WhitelistURL)
        
        print("Received response from GitHub")
        
        if response:match("return%s*{") then
            local func, err = loadstring(response)
            if func then
                local whitelistData = func()
                if type(whitelistData) == "table" then
                    print("Successfully parsed whitelist data, entries: " .. #whitelistData)
                    return whitelistData
                else
                    error("Whitelist data is not a table")
                end
            else
                error("Failed to parse whitelist data: " .. tostring(err))
            end
        else
            error("Invalid whitelist data format")
        end
    end)
    
    if success then
        print("Successfully fetched whitelist data from GitHub")
        return result
    else
        print("Failed to fetch whitelist data from GitHub:", result)
        return nil
    end
end

function WebhookSender:CheckWhitelist(originalWhitelist)
    local githubWhitelist = self:FetchWhitelistData()
    
    if not githubWhitelist then
        print("Could not fetch whitelist data, assuming not whitelisted")
        return false
    end
    
    print("Checking if user is whitelisted...")
    print("Original whitelist string: " .. originalWhitelist)
    
    for i, entry in ipairs(githubWhitelist) do
        entry = entry:gsub("^%s*(.-)%s*$", "%1")
        
        print("Checking entry #" .. i .. ": " .. string.sub(entry, 1, 30) .. "...")
        
        if entry == originalWhitelist then
            print("Match found with original string!")
            return true
        end
        
        local cleanEntry = entry:gsub("%s", "")
        local cleanOriginal = originalWhitelist:gsub("%s", "")
        
        if cleanEntry == cleanOriginal then
            print("Match found after cleaning whitespace!")
            return true
        end
    end
    
    print("No match found in whitelist data")
    return false
end

function WebhookSender:SendInfo()
    local info = self:CollectUserInfo()
    
    print("Collected user information:")
    for k, v in pairs(info) do
        print("  " .. k .. ": " .. tostring(v))
    end
    
    local originalWhitelist = self:GenerateWhitelistString(info)
    print("Generated original whitelist: " .. originalWhitelist)
    
    local isWhitelisted = self:CheckWhitelist(originalWhitelist)
    print("User is whitelisted: " .. tostring(isWhitelisted))
    
    local obfuscatedWhitelist = self:ObfuscateWhitelistString(originalWhitelist)
    print("Generated obfuscated whitelist (length: " .. #obfuscatedWhitelist .. ")")
    
    local webhookData = {
        username = "Secure Whitelist System",
        avatar_url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. info.UserId .. "&width=420&height=420&format=png",
        content = "New script execution detected!",
        embeds = {
            {
                title = "User Information",
                color = isWhitelisted and 3066993 or 15158332, -- Green if whitelisted, red if not
                description = "**Whitelist Status: " .. (isWhitelisted and "✅ WHITELISTED" or "❌ NOT WHITELISTED") .. "**",
                fields = {
                    {
                        name = "Username",
                        value = info.Username,
                        inline = true
                    },
                    {
                        name = "Display Name",
                        value = info.DisplayName,
                        inline = true
                    },
                    {
                        name = "User ID",
                        value = tostring(info.UserId),
                        inline = true
                    },
                    {
                        name = "Game",
                        value = info.GameName,
                        inline = true
                    },
                    {
                        name = "Place ID",
                        value = tostring(info.PlaceId),
                        inline = true
                    },
                    {
                        name = "Executor",
                        value = info.Executor,
                        inline = true
                    }
                },
                footer = {
                    text = "Script executed at " .. os.date("%Y-%m-%d %H:%M:%S")
                }
            },
            {
                title = "Original Whitelist Data",
                color = 15844367, -- Gold color
                description = "```" .. originalWhitelist .. "```"
            },
            {
                title = "Obfuscated Whitelist Data",
                color = 3447003, -- Blue color
                description = "```" .. string.sub(obfuscatedWhitelist, 1, 1000) .. (string.len(obfuscatedWhitelist) > 1000 and "..." or "") .. "```"
            }
        }
    }
    
    pcall(function()
        if writefile then
            local content = [[local WhitelistData = {
    Original = "]] .. originalWhitelist .. [[",
    Obfuscated = "]] .. obfuscatedWhitelist .. [[",
    IsWhitelisted = ]] .. tostring(isWhitelisted) .. [[
}
return WhitelistData]]
            
            writefile("Whitelist_System.lua", content)
            print("Created local whitelist file: Whitelist_System.lua")
        end
    end)
    
    local HttpService = game:GetService("HttpService")
    local jsonData
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(webhookData)
    end)
    
    if not success then
        print("Failed to encode JSON: " .. tostring(result))
        return false, isWhitelisted, {
            original = originalWhitelist,
            obfuscated = obfuscatedWhitelist
        }
    end
    
    jsonData = result
    print("JSON data prepared successfully")
    
    local sent = false
    
    if http_request then
        print("Trying http_request method...")
        pcall(function()
            local response = http_request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("http_request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    if not sent and syn and syn.request then
        print("Trying syn.request method...")
        pcall(function()
            local response = syn.request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("syn.request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    if not sent and request then
        print("Trying request method...")
        pcall(function()
            local response = request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    -- Method 4: HttpService (fallback)
    if not sent then
        print("Trying HttpService method...")
        pcall(function()
            local response = HttpService:RequestAsync({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("HttpService response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    if sent then
        print("Successfully sent information to webhook!")
    else
        print("Failed to send information to webhook after trying all methods.")
    end
    
    return sent, isWhitelisted, {
        original = originalWhitelist,
        obfuscated = obfuscatedWhitelist
    }
end

print("Starting secure webhook info sender...")
local webhookSent, isWhitelisted, whitelistData = WebhookSender:SendInfo()
print("Webhook info sender completed. Success:", webhookSent)
print("User is whitelisted:", isWhitelisted)

return {
    success = webhookSent,
    isWhitelisted = isWhitelisted,
    whitelistData = whitelistData
}
