-- Simple Webhook Info Sender
-- This script will send your Roblox information to a Discord webhook

local WebhookSender = {}

-- Replace this with your Discord webhook URL
WebhookSender.WebhookURL = "https://discord.com/api/webhooks/1368393336183849085/hd-r2quKsj1_nw5YK1JEBHlpktkTVlGJH_hIB4W5aBJyL_Ik3WdtW16mZ_kU-avGYKkI"

-- Function to collect user information
function WebhookSender:CollectUserInfo()
    local info = {}
    
    -- Get player information
    local player = game:GetService("Players").LocalPlayer
    info.UserId = player.UserId
    info.Username = player.Name
    info.DisplayName = player.DisplayName
    
    -- Get game information
    info.PlaceId = game.PlaceId
    info.GameName = "Unknown Game"
    
    pcall(function()
        info.GameName = game:GetService("MarketplaceService"):GetProductInfo(info.PlaceId).Name
    end)
    
    -- Get executor information
    info.Executor = "Unknown"
    pcall(function()
        if identifyexecutor then 
            info.Executor = identifyexecutor() 
        elseif getexecutorname then 
            info.Executor = getexecutorname() 
        end
    end)
    
    -- Get hardware ID (for whitelist purposes)
    info.HWID = "Unknown"
    pcall(function()
        if getexecutorhwid then
            info.HWID = getexecutorhwid()
        elseif gethwid then
            info.HWID = gethwid()
        elseif get_hwid then
            info.HWID = get_hwid()
        end
    end)
    
    -- Get client ID
    info.ClientID = "Unknown"
    pcall(function()
        info.ClientID = game:GetService("RbxAnalyticsService"):GetClientId()
    end)
    
    return info
end

-- Function to send information to webhook
function WebhookSender:SendInfo()
    local info = self:CollectUserInfo()
    
    print("Collected user information:")
    for k, v in pairs(info) do
        print("  " .. k .. ": " .. tostring(v))
    end
    
    -- Create a whitelist-like string (similar to your original script)
    local whitelistString = string.format("Lurnai_%s_%s_%s_%s_%s", 
        info.HWID,
        tostring(info.UserId),
        tostring(info.ClientID),
        info.Username,
        info.Executor
    )
    
    -- Prepare webhook data
    local webhookData = {
        username = "Roblox Info Sender",
        avatar_url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. info.UserId .. "&width=420&height=420&format=png",
        content = "New script execution detected!",
        embeds = {
            {
                title = "User Information",
                color = 3447003, -- Blue color
                fields = {
                    {
                        name = "Username",
                        value = info.Username,
                        inline = true
                    },
                    {
                        name = "Display Name",
                        value = info.DisplayName,
                        inline = true
                    },
                    {
                        name = "User ID",
                        value = tostring(info.UserId),
                        inline = true
                    },
                    {
                        name = "Game",
                        value = info.GameName,
                        inline = true
                    },
                    {
                        name = "Place ID",
                        value = tostring(info.PlaceId),
                        inline = true
                    },
                    {
                        name = "Executor",
                        value = info.Executor,
                        inline = true
                    }
                },
                footer = {
                    text = "Script executed at " .. os.date("%Y-%m-%d %H:%M:%S")
                }
            },
            {
                title = "Whitelist Data",
                color = 15844367, -- Gold color
                description = "```" .. whitelistString .. "```"
            }
        }
    }
    
    -- Convert to JSON
    local HttpService = game:GetService("HttpService")
    local jsonData
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(webhookData)
    end)
    
    if not success then
        print("Failed to encode JSON: " .. tostring(result))
        return false
    end
    
    jsonData = result
    print("JSON data prepared successfully")
    
    -- Send the webhook using multiple methods
    local sent = false
    
    -- Method 1: http_request
    if http_request then
        print("Trying http_request method...")
        pcall(function()
            local response = http_request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("http_request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    -- Method 2: syn.request
    if not sent and syn and syn.request then
        print("Trying syn.request method...")
        pcall(function()
            local response = syn.request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("syn.request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    -- Method 3: request
    if not sent and request then
        print("Trying request method...")
        pcall(function()
            local response = request({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("request response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    -- Method 4: HttpService (fallback)
    if not sent then
        print("Trying HttpService method...")
        pcall(function()
            local response = HttpService:RequestAsync({
                Url = self.WebhookURL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
            
            print("HttpService response: " .. tostring(response.StatusCode))
            if response.StatusCode == 200 or response.StatusCode == 204 then
                sent = true
            end
        end)
    end
    
    if sent then
        print("Successfully sent information to webhook!")
        return true
    else
        print("Failed to send information to webhook after trying all methods.")
        return false
    end
end

-- Run the webhook sender
print("Starting webhook info sender...")
local success = WebhookSender:SendInfo()
print("Webhook info sender completed. Success:", success)

return success
