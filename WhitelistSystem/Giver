-- Simple Whitelist System with GitHub Integration
local WhitelistSystem = {}

-- Configuration
WhitelistSystem.Config = {
    LocalFile = "whitelist_data.lua",
    GitHubRawURL = "https://raw.githubusercontent.com/TryharderKid/Ff/main/Whitelist_Data.lua",
    Debug = false
}

-- Debug print function
local function debugPrint(...)
    if WhitelistSystem.Config.Debug then
        print("[Whitelist Debug]", ...)
    end
end

-- Generate a whitelist string for the current user
function WhitelistSystem:GenerateWhitelistString()
    -- Safe function caller
    local function safecall(func, ...)
        if type(func) == "function" then
            local success, result = pcall(func, ...)
            if success then return result end
        end
        return nil
    end
    
    -- Get HWID with multiple fallbacks
    local hwid = nil
    hwid = safecall(function() return getexecutorhwid() end)
    if not hwid then hwid = safecall(function() return gethwid() end) end
    if not hwid then hwid = safecall(function() return get_hwid() end) end
    if not hwid then hwid = safecall(function() return getexecutoridentifier() end) end
    if not hwid then hwid = "UNKNOWN_HWID" end
    
    -- Get user data
    local userId = game:GetService("Players").LocalPlayer.UserId
    
    -- Get client ID
    local clientID = "UNKNOWN_CLIENT_ID"
    pcall(function()
        clientID = game:GetService("RbxAnalyticsService"):GetClientId()
    end)
    
    -- Create a persistent ID
    local function getPersistentID()
        local HttpService = game:GetService("HttpService")
        local filename = "lurnai_persistent_id.dat"
        
        local existingID = nil
        pcall(function()
            if readfile then existingID = readfile(filename) end
        end)
        
        if existingID and #existingID > 10 then
            return existingID
        end
        
        local newID = HttpService:GenerateGUID(false)
        pcall(function()
            if writefile then writefile(filename, newID) end
        end)
        
        return newID
    end
    
    local persistentID = getPersistentID()
    
    -- Get player name
    local playerName = game:GetService("Players").LocalPlayer.Name
    
    -- Get executor name
    local executorName = "Unknown"
    pcall(function()
        if identifyexecutor then executorName = identifyexecutor() end
        if executorName == "Unknown" and getexecutorname then executorName = getexecutorname() end
    end)
    
    -- Format the whitelist string with all identifiers
    local whitelistString = string.format("Lurnai_%s_%s_%s_%s_%s_%s", 
        hwid,
        tostring(userId),
        tostring(persistentID),
        tostring(clientID),
        playerName,
        executorName
    )
    
    return whitelistString
end

-- Fetch whitelist data from GitHub
function WhitelistSystem:FetchWhitelistData()
    local success, result = pcall(function()
        local response = game:HttpGet(self.Config.GitHubRawURL)
        
        -- Basic validation to ensure it's a Lua table
        if response:match("return%s*{") then
            -- Use loadstring to convert the response to a Lua table
            local func, err = loadstring(response)
            if func then
                local whitelistData = func()
                if type(whitelistData) == "table" then
                    return whitelistData
                else
                    error("Whitelist data is not a table")
                end
            else
                error("Failed to parse whitelist data: " .. tostring(err))
            end
        else
            error("Invalid whitelist data format")
        end
    end)
    
    if success then
        debugPrint("Successfully fetched whitelist data from GitHub")
        return result
    else
        debugPrint("Failed to fetch whitelist data from GitHub:", result)
        return nil
    end
end

-- Save the user's whitelist string to a local file
function WhitelistSystem:SaveWhitelistString()
    local whitelistString = self:GenerateWhitelistString()
    
    local success, result = pcall(function()
        if writefile then
            local content = [[
-- Whitelist Data for User
-- Add this string to your GitHub whitelist file
return "]] .. whitelistString .. [["
]]
            writefile(self.Config.LocalFile, content)
            return true
        else
            error("Cannot write local files")
        end
    end)
    
    if success then
        print("‚úÖ Your whitelist string has been saved to: " .. self.Config.LocalFile)
        return whitelistString
    else
        print("‚ùå Failed to save whitelist string:", result)
        return whitelistString
    end
end

-- Check if the user is whitelisted
function WhitelistSystem:CheckWhitelist()
    -- Generate the user's whitelist string
    local userWhitelistString = self:GenerateWhitelistString()
    
    -- Save the whitelist string to a local file
    self:SaveWhitelistString()
    
    -- Try to fetch whitelist data from GitHub
    local whitelistData = self:FetchWhitelistData()
    
    -- If we couldn't fetch the whitelist data, return false
    if not whitelistData then
        print("‚ùå Could not fetch whitelist data from GitHub")
        return false
    end
    
    -- Check if the user's whitelist string is in the whitelist
    for _, entry in ipairs(whitelistData) do
        if entry == userWhitelistString then
            return true
        end
    end
    
    -- If not whitelisted, copy the whitelist string to clipboard
    pcall(function()
        if setclipboard then
            setclipboard(userWhitelistString)
            print("Your whitelist string has been copied to clipboard. Contact the developer to get whitelisted.")
        elseif writeclipboard then
            writeclipboard(userWhitelistString)
            print("Your whitelist string has been copied to clipboard. Contact the developer to get whitelisted.")
        else
            print("Your whitelist string: " .. userWhitelistString)
            print("Contact the developer with this string to get whitelisted.")
        end
    end)
    
    return false
end

-- Initialize the whitelist system
function WhitelistSystem:Initialize()
    print("üîí Initializing whitelist system...")
    
    -- Check if the user is whitelisted
    local isWhitelisted = self:CheckWhitelist()
    
    if isWhitelisted then
        print("‚úÖ Access granted! You are whitelisted.")
        return true
    else
        print("‚ùå Access denied! You are not whitelisted.")
        
        -- Show a notification in-game
        pcall(function()
            local StarterGui = game:GetService("StarterGui")
            StarterGui:SetCore("SendNotification", {
                Title = "Whitelist Check Failed",
                Text = "You are not whitelisted. Contact the developer.",
                Duration = 10
            })
        end)
        
        return false
    end
end

-- Return the whitelist system
return WhitelistSystem
