-- Local Whitelist System Loader with Enhanced Security
local WhitelistSystem = {
    GenerateWhitelistString = function(self)
        -- Safe function caller
        local function safecall(func, ...)
            if type(func) == "function" then
                local success, result = pcall(func, ...)
                if success then return result end
            end
            return nil
        end
        
        -- Get HWID with multiple fallbacks
        local hwid = nil
        hwid = safecall(function() return getexecutorhwid() end)
        if not hwid then hwid = safecall(function() return gethwid() end) end
        if not hwid then hwid = safecall(function() return get_hwid() end) end
        if not hwid then hwid = safecall(function() return getexecutoridentifier() end) end
        if not hwid then hwid = "UNKNOWN_HWID" end
        
        -- Get user data
        local userId = game:GetService("Players").LocalPlayer.UserId
        
        -- Get client ID
        local clientID = "UNKNOWN_CLIENT_ID"
        pcall(function()
            clientID = game:GetService("RbxAnalyticsService"):GetClientId()
        end)
        
        -- Create a persistent ID
        local function getPersistentID()
            local HttpService = game:GetService("HttpService")
            local filename = "lurnai_persistent_id.dat"
            
            local existingID = nil
            pcall(function()
                if readfile then existingID = readfile(filename) end
            end)
            
            if existingID and #existingID > 10 then
                return existingID
            end
            
            local newID = HttpService:GenerateGUID(false)
            pcall(function()
                if writefile then writefile(filename, newID) end
            end)
            
            return newID
        end
        
        local persistentID = getPersistentID()
        
        -- Get player name
        local playerName = game:GetService("Players").LocalPlayer.Name
        
        -- Get executor name
        local executorName = "Unknown"
        pcall(function()
            if identifyexecutor then executorName = identifyexecutor() end
            if executorName == "Unknown" and getexecutorname then executorName = getexecutorname() end
        end)
        
        -- Print all components for debugging
        print("HWID:", hwid)
        print("UserID:", userId)
        print("ClientID:", clientID)
        print("PersistentID:", persistentID)
        print("PlayerName:", playerName)
        print("ExecutorName:", executorName)
        
        -- Format the whitelist string with all identifiers
        local whitelistString = string.format("%s_%s_%s_%s_%s_%s", 
            hwid,
            tostring(userId),
            tostring(persistentID),
            tostring(clientID),
            playerName,
            executorName
        )
        
        -- Advanced hashing function using SHA-256 simulation
        local function advancedHash(str)
            local function bitXOR(a, b)
                local p, c = 1, 0
                while a > 0 and b > 0 do
                    local ra, rb = a % 2, b % 2
                    if ra ~= rb then c = c + p end
                    a, b, p = (a - ra) / 2, (b - rb) / 2, p * 2
                end
                if a > 0 then c = c + a * p end
                if b > 0 then c = c + b * p end
                return c
            end
            
            local function bitRotate(n, b)
                local power = 2^32
                b = b % 32
                n = n % power
                return ((n * 2^b) % power) + math.floor(n / 2^(32 - b))
            end
            
            local h1 = 0x6a09e667
            local h2 = 0xbb67ae85
            local h3 = 0x3c6ef372
            local h4 = 0xa54ff53a
            local h5 = 0x510e527f
            local h6 = 0x9b05688c
            local h7 = 0x1f83d9ab
            local h8 = 0x5be0cd19
            
            for i = 1, #str, 64 do
                local chunk = string.sub(str, i, i + 63)
                if #chunk < 64 then
                    chunk = chunk .. string.rep("\0", 64 - #chunk)
                end
                
                for j = 1, #chunk do
                    local byte = string.byte(chunk, j)
                    h1 = (h1 + byte * j) % 0xFFFFFFFF
                    h2 = bitXOR(h2, byte) % 0xFFFFFFFF
                    h3 = bitRotate(h3 + byte, byte % 32) % 0xFFFFFFFF
                    h4 = (h4 * (byte + 1)) % 0xFFFFFFFF
                    h5 = bitXOR(h5, bitRotate(byte, 11)) % 0xFFFFFFFF
                    h6 = (h6 + bitXOR(byte, j)) % 0xFFFFFFFF
                    h7 = bitRotate(h7, 7) + byte % 0xFFFFFFFF
                    h8 = (h8 + (h1 % 256)) % 0xFFFFFFFF
                end
            end
            
            return string.format("%08x%08x%08x%08x%08x%08x%08x%08x", h1, h2, h3, h4, h5, h6, h7, h8)
        end
        
        -- Chinese character mapping for obfuscation
        local chineseChars = {
            "龍", "鳳", "虎", "麒", "鷹", "狼", "鹿", "熊", "蛇", "鯨",
            "鳥", "馬", "牛", "羊", "猴", "雞", "狗", "豬", "鼠", "兔",
            "龜", "鱷", "象", "獅", "豹", "鷲", "鯊", "鳶", "蝶", "蜂",
            "蟒", "蠍", "蝎", "蜘", "蛛", "蝠", "鴿", "鵝", "鴨", "鵲"
        }
        
        -- Apply advanced obfuscation with Chinese characters
        local function obfuscateAdvanced(str)
            local hash = advancedHash(str)
            local result = "神秘_" -- "Mysterious" prefix
            
            -- Add timestamp and hash
            local timestamp = os.time()
            result = result .. tostring(timestamp) .. "_" .. hash .. "_"
            
            -- Convert string to bytes and map to Chinese characters
            for i = 1, #str do
                local byte = string.byte(str, i)
                local chineseIndex = (byte % #chineseChars) + 1
                local chineseChar = chineseChars[chineseIndex]
                
                -- Encode the byte value within the Chinese character
                result = result .. chineseChar .. tostring(byte) .. "_"
            end
            
            -- Add a verification hash at the end
            local verificationHash = advancedHash(str .. tostring(timestamp))
            result = result .. "驗證_" .. string.sub(verificationHash, 1, 16) -- "Verification" suffix
            
            return result
        end
        
        local obfuscatedString = obfuscateAdvanced(whitelistString)
        print("Generated whitelist string:", obfuscatedString)
        return obfuscatedString
    end,
    
    VerifyAccess = function(self, whitelistData)
        -- Generate the user's whitelist string
        local userWhitelistString = self:GenerateWhitelistString()
        
        -- Check if the user's whitelist string is in the whitelist
        for _, whitelistedString in ipairs(whitelistData) do
            if whitelistedString == userWhitelistString then
                print("訪問授予！您已通過白名單驗證。") -- "Access granted! You are whitelisted." in Chinese
                return true
            end
        end
        
        print("訪問被拒絕！您不在白名單中。") -- "Access denied! You are not whitelisted." in Chinese
        -- Copy the user's whitelist string to clipboard for easy whitelisting
        pcall(function()
            if setclipboard then
                setclipboard(userWhitelistString)
                print("您的白名單字符串已復制到剪貼板。請聯繫開發者以獲取白名單權限。")
            elseif writeclipboard then
                writeclipboard(userWhitelistString)
                print("您的白名單字符串已復制到剪貼板。請聯繫開發者以獲取白名單權限。")
            else
                print("您的白名單字符串: " .. userWhitelistString)
                print("請使用此字符串聯繫開發者以獲取白名單權限。")
            end
        end)
        
        return false
    end,
    
    -- Decrypt a whitelist string (for admin verification)
    DecryptWhitelistString = function(self, obfuscatedString)
        -- Check if it's our format
        if not string.match(obfuscatedString, "^神秘_") then
            return "Invalid whitelist format"
        end
        
        local parts = {}
        for part in string.gmatch(obfuscatedString, "[^_]+") do
            table.insert(parts, part)
        end
        
        -- Skip prefix, timestamp, and hash
        local originalString = ""
        for i = 4, #parts - 2 do
            local part = parts[i]
            -- Extract the byte value (numbers after the Chinese character)
            local byteStr = string.match(part, "%d+")
            if byteStr then
                local byte = tonumber(byteStr)
                if byte then
                    originalString = originalString .. string.char(byte)
                end
            end
        end
        
        return originalString
    end
}

-- Empty whitelist data for testing
local whitelistData = {}

-- Generate a whitelist string for the current user
local userString = WhitelistSystem:GenerateWhitelistString()
print("將此字符串添加到您的whitelist_Data.lua文件中:") -- "Add this string to your whitelist_Data.lua file:" in Chinese
print(userString)

-- Verify access (will fail since whitelist is empty)
local hasAccess = WhitelistSystem:VerifyAccess(whitelistData)
if hasAccess then
    print("白名單驗證成功！您現在可以加載主腳本。") -- "Whitelist verification successful! You can now load your main script." in Chinese
else
    print("白名單驗證失敗。請將您的字符串添加到白名單中。") -- "Whitelist verification failed. Please add your string to the whitelist." in Chinese
end
